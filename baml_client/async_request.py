###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal
from typing_extensions import NotRequired

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def GetAnalysis(
        self,
        context: str,target_lang: str,source_text: str,source_lang: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetAnalysis",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "source_lang": source_lang,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GetBackTranslation(
        self,
        context: str,source_lang: str,clarified_translation: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetBackTranslation",
        {
          "context": context,
          "source_lang": source_lang,
          "clarified_translation": clarified_translation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GetClarity(
        self,
        context: str,prompt: str,analysis: str,target_lang: str,literal_translation: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetClarity",
        {
          "context": context,
          "prompt": prompt,
          "analysis": analysis,
          "target_lang": target_lang,
          "literal_translation": literal_translation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GetFinalTranslation(
        self,
        context: str,target_lang: str,source_text: str,analysis: str,clarified_translation: str,final_review: str,item_type: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetFinalTranslation",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "analysis": analysis,
          "clarified_translation": clarified_translation,
          "final_review": final_review,
          "item_type": item_type,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GetLiteralTranslate(
        self,
        context: str,prompt: str,source_lang: str,target_lang: str,is_song: bool,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetLiteralTranslate",
        {
          "context": context,
          "prompt": prompt,
          "source_lang": source_lang,
          "target_lang": target_lang,
          "is_song": is_song,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GetReview(
        self,
        context: str,target_lang: str,source_text: str,clarified_translation: str,backtranslation: str,syllabification: Union[str, Optional[None]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetReview",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "clarified_translation": clarified_translation,
          "backtranslation": backtranslation,
          "syllabification": syllabification,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def GetAnalysis(
        self,
        context: str,target_lang: str,source_text: str,source_lang: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetAnalysis",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "source_lang": source_lang,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GetBackTranslation(
        self,
        context: str,source_lang: str,clarified_translation: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetBackTranslation",
        {
          "context": context,
          "source_lang": source_lang,
          "clarified_translation": clarified_translation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GetClarity(
        self,
        context: str,prompt: str,analysis: str,target_lang: str,literal_translation: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetClarity",
        {
          "context": context,
          "prompt": prompt,
          "analysis": analysis,
          "target_lang": target_lang,
          "literal_translation": literal_translation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GetFinalTranslation(
        self,
        context: str,target_lang: str,source_text: str,analysis: str,clarified_translation: str,final_review: str,item_type: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetFinalTranslation",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "analysis": analysis,
          "clarified_translation": clarified_translation,
          "final_review": final_review,
          "item_type": item_type,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GetLiteralTranslate(
        self,
        context: str,prompt: str,source_lang: str,target_lang: str,is_song: bool,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetLiteralTranslate",
        {
          "context": context,
          "prompt": prompt,
          "source_lang": source_lang,
          "target_lang": target_lang,
          "is_song": is_song,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GetReview(
        self,
        context: str,target_lang: str,source_text: str,clarified_translation: str,backtranslation: str,syllabification: Union[str, Optional[None]],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GetReview",
        {
          "context": context,
          "target_lang": target_lang,
          "source_text": source_text,
          "clarified_translation": clarified_translation,
          "backtranslation": backtranslation,
          "syllabification": syllabification,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]