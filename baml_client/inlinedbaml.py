###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> GPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> Gemini {\r\n  provider google-ai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gemini-2.0-flash\"\r\n    api_key env.GEMINI_API_KEY\r\n    generationConfig {\r\n      temperature 0.7\r\n      max_output_tokens 5000\r\n    }\r\n  }\r\n}\r\n\r\nclient<llm> Sonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-7-sonnet-latest\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> Haiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [GPT4oMini, Haiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [GPT4oMini, GPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "translate.baml": "function GetLiteralTranslate(context: string, prompt: string, source_lang: string, target_lang: string, is_song: bool) -> string {\r\n\r\n  // Specify a client afrom clients.baml\r\n  client Gemini // Set Model\r\n  prompt #\"\r\n    {{context}}\r\n\r\n    Provide a literal, word-for-word translation of the following text into {{target_lang}}\r\n\r\n    <source_text>\r\n    {{ prompt }}\r\n    </source_text>\r\n\r\n    After each line or paragraph, provide alternative translations for key terms, ambiguous passages, and any challenging passages.\r\n    Use square brackets to indicate alternatives.\r\n    Include brief explanations and backtranslations of any alternative translations so that even a non-native speaker could understand what the choice means.\r\n\r\n    Use bullet points to organize your analysis.\r\n\r\n    Return as a markdown string\r\n  \"#\r\n}\r\n\r\nfunction GetClarity(context: string, prompt: string, analysis: string, target_lang: string, literal_translation: string) -> string {\r\n\r\n  // Specify a client afrom clients.baml\r\n  client Gemini // Set Model\r\n  prompt #\"\r\n    {{context}}\r\n\r\n    Adapt this literal translation into clear, simple {{target_lang}}, emphasizing clarity while retaining a reasonable amount of the original meaning.\r\n\r\n    Likewise, if a line is blank, include a blank line in the output.\r\n\r\n    If applicable, write an alternative translation after a phrase or line in square brackets.\r\n    For example, \"Amazing grace, how sweet the sound [Stunning grace, how it moves my ear]\".\r\n    Don't include backtranslations at this point.\r\n\r\n    If there are no reasonable alternatives, simply leave the line as is.\r\n\r\n    <original>\r\n    {{prompt}}\r\n    </original>\r\n\r\n    <analysis>\r\n    {{analysis}}\r\n    </analysis>\r\n\r\n    <literal_translation>\r\n    {{literal_translation}}\r\n    </literal_translation>\r\n\r\n    Use bullet points to organize your analysis.\r\n\r\n    Return as a markdown string\r\n  \"#\r\n}\r\n\r\nfunction GetAnalysis(context: string, target_lang: string, source_text: string, source_lang: string) -> string {\r\n  // Specify a client a from clients.baml\r\n  client Gemini // Set Model\r\n  prompt #\"\r\n\r\n    {{context}}\r\n\r\n    Please provide a detailed analysis of the source text to help guide the translation process.\r\n\r\n    <source_text>\r\n    {{source_text}}\r\n    <source_text>\r\n\r\n    Outline of the text, with the main ideas of each section\r\n    Provide a detailed analysis of the following aspects:\r\n\r\n        1. Theological concepts and terminology, including any specific references to scripture or doctrine. For each concept or reference, describe it in {{source_lang}} and {{target_lang}}, including a complete quote in {{target_lang}} if applicable.\r\n        2. Cultural references\r\n        3. Key metaphors and imagery\r\n        4. Potential translation challenges\r\n\r\n    Use bullet points to organize your analysis.\r\n\r\n    Return as a markdown string\r\n  \"#\r\n}\r\n\r\nfunction GetReview(\r\n  context: string,\r\n  target_lang: string,\r\n  source_text: string,\r\n  clarified_translation: string,\r\n  backtranslation: string,\r\n  syllabification: string | null) -> string {\r\n\r\n  client Gemini\r\n  prompt #\"\r\n    {{context}}\r\n\r\n    Please provide a comprehensive review of the translation, considering:\r\n\r\n      1. Accuracy of meaning\r\n      2. Preservation of theological concepts\r\n      3. Cultural appropriateness\r\n      4. Areas for potential improvement\r\n\r\n    One or more errors may have been introduced in the translation. Identify and correct them.\r\n\r\n    Compare:\r\n\r\n    Original:\r\n    {{source_text}}\r\n\r\n    Final Translation:\r\n    {{clarified_translation}}\r\n\r\n    Backtranslation:\r\n    {{backtranslation}}\r\n\r\n    The analysis should include both strengths and weaknesses. Provide specific recommendations for improvement.\r\n\r\n    Use bullet points to organize your analysis.\r\n\r\n    Return as a markdown string\r\n  \"#\r\n}\r\n\r\nfunction GetBackTranslation(\r\n  context: string,\r\n  source_lang: string,\r\n  clarified_translation: string) -> string {\r\n\r\n  client Gemini\r\n  prompt #\"\r\n    {{context}}\r\n\r\n    To verify the translation, we will backtranslate it into the original language.\r\n    Translate the following literally into {{source_lang}}, adding notes as needed in [ ] brackets:\r\n\r\n    <translation>\r\n    {{clarified_translation}}\r\n    </translation>\r\n  \"#\r\n}\r\n\r\nfunction GetFinalTranslation(\r\n  context: string,\r\n  target_lang: string,\r\n  source_text: string,\r\n  analysis: string,\r\n  clarified_translation: string,\r\n  final_review: string,\r\n  item_type: string\r\n) -> string {\r\n  client Gemini\r\n  prompt #\"\r\n    {{context}}\r\n\r\n    Based on the analysis, translation, backtranslation, and review, provide a final translation of the {{item_type}} into {{target_lang}}.\r\n\r\n    <original>\r\n    {{source_text}}\r\n    </original>\r\n\r\n    <analysis>\r\n    {{analysis}}\r\n    </analysis>\r\n\r\n    <translation>\r\n    {{clarified_translation}}\r\n    </translation>\r\n\r\n    <review>\r\n    {{final_review}}\r\n    </review>\r\n\r\n    Use bullet points to organize your analysis.\r\n\r\n    Return the tranlation as a simple string.\r\n  \"#\r\n}\r\n\r\ntest analysis{\r\n    functions [GetAnalysis]\r\n    args {\r\n        context \"For context, we are translating a text from English to French, aiming for accuracy, simplicity, and clarity. This step is one part of a multi-step process to translate the text. Do only what is asked in each step.\"\r\n        source_text \"For God so loved the world!\"\r\n        source_lang \"English\"\r\n        target_lang \"French\"\r\n    }\r\n}",
}

def get_baml_files():
    return file_map